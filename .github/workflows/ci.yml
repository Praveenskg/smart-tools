name: Code Quality & Type Safety

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '20'
  CACHE_VERSION: 'v1'

jobs:
  code-quality:
    name: Quality Assurance Pipeline
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: write
      checks: write

    strategy:
      fail-fast: false
      matrix:
        check: [typescript, eslint]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --prefer-offline --no-audit
          echo "Dependencies installed successfully"

      - name: TypeScript Type Check
        if: matrix.check == 'typescript'
        run: |
          echo "Running TypeScript type checking..."
          npm run type-check
          echo "TypeScript check completed successfully"

      - name: ESLint Code Quality Check
        if: matrix.check == 'eslint'
        run: |
          echo "Running ESLint code quality check..."
          npm run lint
          echo "ESLint check completed successfully"

      - name: Generate Quality Report
        if: always()
        run: |
          echo "## Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ${{ matrix.check == 'typescript' && 'Passed' || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ${{ matrix.check == 'eslint' && 'Passed' || 'Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY

  pr-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'pull_request'
    
    permissions:
      pull-requests: write

    steps:
      - name: Comment PR with Results
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            // Get workflow run results
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: 'ci.yml',
              head_sha: context.payload.pull_request.head.sha,
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              console.log('No workflow runs found');
              return;
            }
            
            const run = runs.workflow_runs[0];
            const status = run.conclusion || run.status;
            const statusText = status === 'success' ? 'SUCCESS' : status === 'failure' ? 'FAILURE' : 'RUNNING';
            
            const body = `## Code Quality Check Results
            
            **Status**: ${statusText}
            
            ### Quality Checks:
            - **TypeScript**: Type safety validation
            - **ESLint**: Code quality and style checks
            
            ### Details:
            - **Workflow**: [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - **Branch**: \`${{ github.head_ref }}\`
            - **Author**: ${{ github.actor }}
            
            ---
            *Quality checks ensure code meets professional standards*`;
            
            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('## Code Quality Check Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: body
              });
            }