#!/usr/bin/env sh
. "$(dirname "$0")/_/husky.sh"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACMR)

# Skip if no files staged
if [ -z "$STAGED_FILES" ]; then
  echo "No staged files to check"
  exit 0
fi

echo "🔍 Running pre-commit checks..."

# Step 1: Prettier auto fix
echo "📝 Formatting code..."
echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx|json|md|css|html)$' \
  | xargs --no-run-if-empty npx prettier --write --ignore-unknown

# Step 2: ESLint auto fix
echo "🔧 Linting code..."
echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' \
  | xargs --no-run-if-empty npx eslint --fix --quiet

# Step 3: Add fixed files
echo "$STAGED_FILES" | xargs git add

# Step 4: Final ESLint check
echo "✅ Final lint check..."
echo "$STAGED_FILES" | grep -E '\.(js|jsx|ts|tsx)$' \
  | xargs --no-run-if-empty npx eslint --max-warnings=0 || {
  echo "❌ ESLint errors found. Please fix them before committing."
  echo "💡 Run 'npm run lint:fix' to auto-fix issues"
  exit 1
}

# Step 5: TypeScript check
echo "🔍 Type checking..."
npx tsc --noEmit || {
  echo "❌ TypeScript errors found. Please fix them before committing."
  echo "💡 Run 'npm run type-check' to see detailed errors"
  exit 1
}

# Step 6: Security audit
echo "🔒 Security audit..."
npm audit --audit-level=moderate || {
  echo "❌ Security vulnerabilities found. Please fix them before committing."
  echo "💡 Run 'npm audit fix' to auto-fix issues"
  exit 1
}

# Step 7: Build validation
echo "🏗️ Validating build..."
npm run build || {
  echo "❌ Build failed. Please fix build issues before committing."
  echo "💡 Run 'npm run build' to see build errors"
  exit 1
}

echo "✅ All pre-commit checks passed!"
